/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guiTema;

import Tema.*;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import static java.lang.Math.round;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author andrei
 */
public class MainFrame extends javax.swing.JFrame {
    static Test obj;
    //customer = clientul curent
    Customer customer;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        customer = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        side_panel = new javax.swing.JPanel();
        customerName_label = new javax.swing.JLabel();
        ShoppingCart_label = new javax.swing.JLabel();
        WishList_label = new javax.swing.JLabel();
        topbar_panel = new javax.swing.JPanel();
        admininstrator_label = new javax.swing.JLabel();
        customers_label = new javax.swing.JLabel();
        load_files_panel = new javax.swing.JPanel();
        load_store_button = new javax.swing.JButton();
        load_customer_button = new javax.swing.JButton();
        load_store_textfield = new javax.swing.JTextField();
        load_customer_textfield = new javax.swing.JTextField();
        load_files_button = new javax.swing.JButton();
        admin_panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_itemsAdmin = new javax.swing.JTable();
        add_item_buttonAdmin = new javax.swing.JButton();
        delete_item_buttonAdmin = new javax.swing.JButton();
        modify_item_buttonAdmin = new javax.swing.JButton();
        customers_panel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_Customers = new javax.swing.JTable();
        select_customer_button = new javax.swing.JButton();
        shoppingCart_panel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table_itemsCustomer = new javax.swing.JTable();
        add_item_buttonCustomer = new javax.swing.JButton();
        delete_item_buttonCustomer = new javax.swing.JButton();
        totalPrice_label = new javax.swing.JLabel();
        budget_label = new javax.swing.JLabel();
        placeOrder_button = new javax.swing.JButton();
        wishList_panel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_WishList = new javax.swing.JTable();
        add_item_wishListButton = new javax.swing.JButton();
        delete_item_wishListButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1000, 500));
        setMinimumSize(new java.awt.Dimension(1000, 500));
        setPreferredSize(new java.awt.Dimension(1000, 500));
        setResizable(false);

        background.setBackground(new java.awt.Color(19, 7, 11));
        background.setForeground(new java.awt.Color(255, 255, 255));
        background.setMaximumSize(new java.awt.Dimension(1000, 500));
        background.setMinimumSize(new java.awt.Dimension(1000, 500));
        background.setPreferredSize(new java.awt.Dimension(1000, 500));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        side_panel.setBackground(new java.awt.Color(18, 60, 105));
        side_panel.setMaximumSize(new java.awt.Dimension(175, 400));
        side_panel.setMinimumSize(new java.awt.Dimension(175, 400));
        side_panel.setPreferredSize(new java.awt.Dimension(175, 400));

        customerName_label.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        customerName_label.setForeground(new java.awt.Color(171, 59, 143));
        customerName_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        customerName_label.setText("Guest");

        ShoppingCart_label.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        ShoppingCart_label.setForeground(new java.awt.Color(238, 226, 220));
        ShoppingCart_label.setText("ShoppingCart");
        ShoppingCart_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createShoppingCartPanel(evt);
            }
        });

        WishList_label.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        WishList_label.setForeground(new java.awt.Color(238, 226, 220));
        WishList_label.setText("WishList");
        WishList_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createWishListPanel(evt);
            }
        });

        javax.swing.GroupLayout side_panelLayout = new javax.swing.GroupLayout(side_panel);
        side_panel.setLayout(side_panelLayout);
        side_panelLayout.setHorizontalGroup(
            side_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, side_panelLayout.createSequentialGroup()
                .addGroup(side_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(side_panelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(customerName_label, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                    .addGroup(side_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(side_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ShoppingCart_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(WishList_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(17, 17, 17))
        );
        side_panelLayout.setVerticalGroup(
            side_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(side_panelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(customerName_label, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(ShoppingCart_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(WishList_label, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(254, Short.MAX_VALUE))
        );

        background.add(side_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 175, 450));

        topbar_panel.setBackground(new java.awt.Color(0, 102, 255));

        admininstrator_label.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        admininstrator_label.setForeground(new java.awt.Color(238, 226, 220));
        admininstrator_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        admininstrator_label.setText("Admin");
        admininstrator_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createAdminPanel(evt);
            }
        });

        customers_label.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        customers_label.setForeground(new java.awt.Color(238, 226, 220));
        customers_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        customers_label.setText("Customers");
        customers_label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                createCustomersPanel(evt);
            }
        });

        javax.swing.GroupLayout topbar_panelLayout = new javax.swing.GroupLayout(topbar_panel);
        topbar_panel.setLayout(topbar_panelLayout);
        topbar_panelLayout.setHorizontalGroup(
            topbar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topbar_panelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(customers_label, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 592, Short.MAX_VALUE)
                .addComponent(admininstrator_label, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        topbar_panelLayout.setVerticalGroup(
            topbar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topbar_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topbar_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(admininstrator_label, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(customers_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        background.add(topbar_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 820, 60));

        load_files_panel.setBackground(new java.awt.Color(186, 178, 181));

        load_store_button.setBackground(new java.awt.Color(237, 199, 183));
        load_store_button.setText("Browse");
        load_store_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_store_buttonActionPerformed(evt);
            }
        });

        load_customer_button.setBackground(new java.awt.Color(237, 199, 183));
        load_customer_button.setText("Browse");
        load_customer_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_customer_buttonActionPerformed(evt);
            }
        });

        load_store_textfield.setEditable(false);
        load_store_textfield.setText("Choose store.txt file from computer...");
        load_store_textfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_store_textfieldActionPerformed(evt);
            }
        });

        load_customer_textfield.setEditable(false);
        load_customer_textfield.setText("Choose customer.txt file from computer...");

        load_files_button.setBackground(new java.awt.Color(237, 199, 183));
        load_files_button.setText("Load files");
        load_files_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_files_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout load_files_panelLayout = new javax.swing.GroupLayout(load_files_panel);
        load_files_panel.setLayout(load_files_panelLayout);
        load_files_panelLayout.setHorizontalGroup(
            load_files_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, load_files_panelLayout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(load_files_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(load_files_button, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(load_files_panelLayout.createSequentialGroup()
                        .addGroup(load_files_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(load_store_textfield)
                            .addComponent(load_customer_textfield, javax.swing.GroupLayout.DEFAULT_SIZE, 604, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(load_files_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(load_customer_button)
                            .addComponent(load_store_button))))
                .addGap(56, 56, 56))
        );
        load_files_panelLayout.setVerticalGroup(
            load_files_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(load_files_panelLayout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addGroup(load_files_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(load_store_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(load_store_button))
                .addGap(27, 27, 27)
                .addGroup(load_files_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(load_customer_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(load_customer_button))
                .addGap(29, 29, 29)
                .addComponent(load_files_button)
                .addContainerGap(133, Short.MAX_VALUE))
        );

        background.add(load_files_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 780, 370));

        admin_panel.setBackground(new java.awt.Color(186, 178, 181));
        admin_panel.setPreferredSize(new java.awt.Dimension(780, 370));
        admin_panel.setVisible(false);

        table_itemsAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {}, new String [] {"ID", "ID_dep" ,"Name", "Price"}) {

            @Override
            public Class<?> getColumnClass(int col) {

                Class retVal = Object.class;

                if(getRowCount() > 0)
                retVal =  getValueAt(0, col).getClass();

                return retVal;
            }
        }
    );
    table_itemsAdmin.setAutoCreateRowSorter(true);
    table_itemsAdmin.getTableHeader().setReorderingAllowed(false);
    TableColumnModel tcm = table_itemsAdmin.getColumnModel();
    tcm.getColumn(0).setPreferredWidth(10);
    tcm.getColumn(1).setPreferredWidth(10);
    tcm.getColumn(2).setPreferredWidth(280);
    tcm.getColumn(3).setPreferredWidth(20);

    DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
    renderer.setHorizontalAlignment(JLabel.RIGHT);
    table_itemsAdmin.getColumnModel().getColumn(3).setCellRenderer(renderer);
    DefaultTableCellRenderer renderer1 = new DefaultTableCellRenderer();
    renderer1.setHorizontalAlignment(JLabel.RIGHT);
    renderer1.setHorizontalAlignment(JLabel.CENTER);
    table_itemsAdmin.getColumnModel().getColumn(0).setCellRenderer(renderer1);
    table_itemsAdmin.getColumnModel().getColumn(1).setCellRenderer(renderer1);
    jScrollPane1.setViewportView(table_itemsAdmin);

    add_item_buttonAdmin.setBackground(new java.awt.Color(237, 199, 183));
    add_item_buttonAdmin.setText("Add Item");
    add_item_buttonAdmin.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            add_item_buttonAdminActionPerformed(evt);
        }
    });

    delete_item_buttonAdmin.setBackground(new java.awt.Color(237, 199, 183));
    delete_item_buttonAdmin.setText("Delete Item");
    delete_item_buttonAdmin.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            delete_item_buttonAdminActionPerformed(evt);
        }
    });

    modify_item_buttonAdmin.setBackground(new java.awt.Color(237, 199, 183));
    modify_item_buttonAdmin.setText("Modify Item");
    modify_item_buttonAdmin.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            modify_item_buttonAdminActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout admin_panelLayout = new javax.swing.GroupLayout(admin_panel);
    admin_panel.setLayout(admin_panelLayout);
    admin_panelLayout.setHorizontalGroup(
        admin_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(admin_panelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
            .addGroup(admin_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(modify_item_buttonAdmin)
                .addComponent(add_item_buttonAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(delete_item_buttonAdmin))
            .addGap(72, 72, 72))
    );
    admin_panelLayout.setVerticalGroup(
        admin_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(admin_panelLayout.createSequentialGroup()
            .addGroup(admin_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(admin_panelLayout.createSequentialGroup()
                    .addGap(50, 50, 50)
                    .addComponent(add_item_buttonAdmin)
                    .addGap(18, 18, 18)
                    .addComponent(modify_item_buttonAdmin)
                    .addGap(18, 18, 18)
                    .addComponent(delete_item_buttonAdmin))
                .addGroup(admin_panelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(58, Short.MAX_VALUE))
    );

    background.add(admin_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 780, 370));

    customers_panel.setBackground(new java.awt.Color(186, 178, 181));
    customers_panel.setVisible(false);

    table_Customers.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {},
        new String [] {
            "Customers"
        }
    ));
    jScrollPane2.setViewportView(table_Customers);
    table_itemsAdmin.setAutoCreateRowSorter(true);

    DefaultTableCellRenderer renderer_customer = new DefaultTableCellRenderer();
    renderer_customer.setHorizontalAlignment(JLabel.RIGHT);
    table_itemsAdmin.getColumnModel().getColumn(0).setCellRenderer(renderer_customer);

    select_customer_button.setBackground(new java.awt.Color(237, 199, 183));
    select_customer_button.setText("Select");
    select_customer_button.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            select_customer_buttonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout customers_panelLayout = new javax.swing.GroupLayout(customers_panel);
    customers_panel.setLayout(customers_panelLayout);
    customers_panelLayout.setHorizontalGroup(
        customers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(customers_panelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
            .addComponent(select_customer_button)
            .addGap(80, 80, 80))
    );
    customers_panelLayout.setVerticalGroup(
        customers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(customers_panelLayout.createSequentialGroup()
            .addGroup(customers_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(customers_panelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(customers_panelLayout.createSequentialGroup()
                    .addGap(58, 58, 58)
                    .addComponent(select_customer_button)))
            .addContainerGap(58, Short.MAX_VALUE))
    );

    background.add(customers_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 780, 370));

    shoppingCart_panel.setBackground(new java.awt.Color(186, 178, 181));

    table_itemsCustomer.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {}, new String [] {"ID", "ID_dep" ,"Name", "Price"}) {

        @Override
        public Class<?> getColumnClass(int col) {

            Class retVal = Object.class;

            if(getRowCount() > 0)
            retVal =  getValueAt(0, col).getClass();

            return retVal;
        }
    }
    );
    table_itemsCustomer.getTableHeader().setReorderingAllowed(false);
    TableColumnModel tcm_customer = table_itemsCustomer.getColumnModel();
    tcm_customer.getColumn(0).setPreferredWidth(10);
    tcm_customer.getColumn(1).setPreferredWidth(10);
    tcm_customer.getColumn(2).setPreferredWidth(280);
    tcm_customer.getColumn(3).setPreferredWidth(20);

    DefaultTableCellRenderer renderer_customer2 = new DefaultTableCellRenderer();
    renderer_customer2.setHorizontalAlignment(JLabel.RIGHT);
    table_itemsCustomer.getColumnModel().getColumn(3).setCellRenderer(renderer_customer2);
    DefaultTableCellRenderer renderer_customer1 = new DefaultTableCellRenderer();
    renderer_customer1.setHorizontalAlignment(JLabel.RIGHT);
    renderer1.setHorizontalAlignment(JLabel.CENTER);
    table_itemsCustomer.getColumnModel().getColumn(0).setCellRenderer(renderer_customer1);
    table_itemsCustomer.getColumnModel().getColumn(1).setCellRenderer(renderer_customer1);
    jScrollPane3.setViewportView(table_itemsCustomer);

    add_item_buttonCustomer.setBackground(new java.awt.Color(237, 199, 183));
    add_item_buttonCustomer.setText("Add Item");
    add_item_buttonCustomer.setVisible(false);
    add_item_buttonCustomer.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            add_item_buttonCustomerActionPerformed(evt);
        }
    });

    delete_item_buttonCustomer.setBackground(new java.awt.Color(237, 199, 183));
    delete_item_buttonCustomer.setText("Delete Item");
    delete_item_buttonCustomer.setVisible(false);
    delete_item_buttonCustomer.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            delete_item_buttonCustomerActionPerformed(evt);
        }
    });

    totalPrice_label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    totalPrice_label.setText("Total:    0.0");

    budget_label.setText("Budget:");

    placeOrder_button.setBackground(new java.awt.Color(237, 199, 183));
    placeOrder_button.setText("Place Order");
    placeOrder_button.setVisible(false);
    placeOrder_button.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            placeOrder_buttonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout shoppingCart_panelLayout = new javax.swing.GroupLayout(shoppingCart_panel);
    shoppingCart_panel.setLayout(shoppingCart_panelLayout);
    shoppingCart_panelLayout.setHorizontalGroup(
        shoppingCart_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(shoppingCart_panelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(shoppingCart_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(shoppingCart_panelLayout.createSequentialGroup()
                    .addComponent(budget_label, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(179, 179, 179)
                    .addComponent(totalPrice_label, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane3))
            .addGap(82, 82, 82)
            .addGroup(shoppingCart_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(placeOrder_button)
                .addGroup(shoppingCart_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(delete_item_buttonCustomer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(add_item_buttonCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap(69, Short.MAX_VALUE))
    );
    shoppingCart_panelLayout.setVerticalGroup(
        shoppingCart_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(shoppingCart_panelLayout.createSequentialGroup()
            .addGroup(shoppingCart_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(shoppingCart_panelLayout.createSequentialGroup()
                    .addGap(55, 55, 55)
                    .addComponent(add_item_buttonCustomer)
                    .addGap(18, 18, 18)
                    .addComponent(delete_item_buttonCustomer))
                .addGroup(shoppingCart_panelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(shoppingCart_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(totalPrice_label, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addComponent(budget_label)
                .addComponent(placeOrder_button))
            .addContainerGap())
    );

    background.add(shoppingCart_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 780, 370));

    wishList_panel.setBackground(new java.awt.Color(186, 178, 181));

    table_WishList.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
        },
        new String [] {
            "ID", "ID_dep", "Name", "Price"
        }
    ));
    table_WishList.getTableHeader().setReorderingAllowed(false);
    TableColumnModel tcm_customer_wishList = table_WishList.getColumnModel();
    tcm_customer_wishList.getColumn(0).setPreferredWidth(10);
    tcm_customer_wishList.getColumn(1).setPreferredWidth(10);
    tcm_customer_wishList.getColumn(2).setPreferredWidth(280);
    tcm_customer_wishList.getColumn(3).setPreferredWidth(20);

    DefaultTableCellRenderer renderer_customer3 = new DefaultTableCellRenderer();
    renderer_customer3.setHorizontalAlignment(JLabel.RIGHT);
    table_WishList.getColumnModel().getColumn(3).setCellRenderer(renderer_customer3);
    DefaultTableCellRenderer renderer_customer4 = new DefaultTableCellRenderer();
    renderer_customer4.setHorizontalAlignment(JLabel.RIGHT);
    renderer1.setHorizontalAlignment(JLabel.CENTER);
    table_WishList.getColumnModel().getColumn(0).setCellRenderer(renderer_customer1);
    table_WishList.getColumnModel().getColumn(1).setCellRenderer(renderer_customer1);
    jScrollPane4.setViewportView(table_WishList);

    add_item_wishListButton.setBackground(new java.awt.Color(237, 199, 183));
    add_item_wishListButton.setText("Add Item");
    add_item_wishListButton.setVisible(false);
    add_item_wishListButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            add_item_wishListButtonActionPerformed(evt);
        }
    });

    delete_item_wishListButton.setBackground(new java.awt.Color(237, 199, 183));
    delete_item_wishListButton.setText("Delete Item");
    delete_item_wishListButton.setVisible(false);
    delete_item_wishListButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            delete_item_wishListButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout wishList_panelLayout = new javax.swing.GroupLayout(wishList_panel);
    wishList_panel.setLayout(wishList_panelLayout);
    wishList_panelLayout.setHorizontalGroup(
        wishList_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(wishList_panelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
            .addGroup(wishList_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(add_item_wishListButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(delete_item_wishListButton, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(73, 73, 73))
    );
    wishList_panelLayout.setVerticalGroup(
        wishList_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(wishList_panelLayout.createSequentialGroup()
            .addGroup(wishList_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(wishList_panelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(wishList_panelLayout.createSequentialGroup()
                    .addGap(50, 50, 50)
                    .addComponent(add_item_wishListButton)
                    .addGap(18, 18, 18)
                    .addComponent(delete_item_wishListButton)))
            .addContainerGap(58, Short.MAX_VALUE))
    );

    background.add(wishList_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 780, 370));

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(5, 5, 5)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    //Ascunde toate panourile si este folosita la schimbarea unui panou
    private void hide_allPanels() {
        load_files_panel.setVisible(false);
        admin_panel.setVisible(false);
        customers_panel.setVisible(false);
        shoppingCart_panel.setVisible(false);
        wishList_panel.setVisible(false);
    }
    
    //Afisarea tabelul cu produsele din magazin
    private void table_itemsAdmin_init(JTable table_itemsAdmin) {
        DefaultTableModel model = (DefaultTableModel) table_itemsAdmin.getModel();
        model.setRowCount(0);
        Vector<Department> deps = Store.getInstance().getDepartments();
        for(int i = 0; i < deps.size(); i++){
            for(Item item:deps.get(i).getItems()){
                model.addRow(new Object[]{
                    item.getID(),
                    item.getID_department(),
                    item.getName(),
                    item.getPrice()}
                );
            }    
        }
    }
    
    //Crearea panoului pentru admininstrator
    private void createAdminPanel(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createAdminPanel
        hide_allPanels();
        admin_panel.setVisible(true);
        table_itemsAdmin_init(table_itemsAdmin);
    }//GEN-LAST:event_createAdminPanel

    //Incarcarea fisierelor de intrare store.txt si customers.txt
    private void load_files_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_files_buttonActionPerformed
        File file1 = new File(load_store_textfield.getText());
        File file2 = new File(load_customer_textfield.getText());
        //In cazul in care nu exista se afiseaza o eroare
        if(file1.exists() == false || file2.exists() == false){
            Object[] options = { "OK" };
            JOptionPane.showOptionDialog(null, "No file chosen!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
            return;
        }
        //Crearea magazinului si popularea lui
        Store store = Store.getInstance();
        obj.createStore(file1.getAbsolutePath(), store);
        obj.createCustomers(file2.getAbsolutePath(), store);
        System.out.println("Done");
        Object[] options = { "OK" };
            JOptionPane.showOptionDialog(null, "Done!", "", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
    }//GEN-LAST:event_load_files_buttonActionPerformed

    private void load_store_textfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_store_textfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_load_store_textfieldActionPerformed
    
    //Incarcarea fisierului customers.txt din computer
    private void load_customer_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_customer_buttonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if(fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
            java.io.File file = fileChooser.getSelectedFile();
            load_customer_textfield.setText(file.toString());
        }
    }//GEN-LAST:event_load_customer_buttonActionPerformed

    //Incarcarea fisierului store.txt din computer
    private void load_store_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_store_buttonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if(fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION){
            java.io.File file = fileChooser.getSelectedFile();
            load_store_textfield.setText(file.toString());
        }
    }//GEN-LAST:event_load_store_buttonActionPerformed
    
    //Curata textul dintr-un textfield cand este apasat
    private void clearTextJTextField(JTextField field) {
        field.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                field.setText("");
            }
        });
    }
    
    //Verifica existenta unui item in magazin
    private boolean checkIfItemExists(Item itemToCheck) {
        Vector<Department> deps = Store.getInstance().getDepartments();
        for(Department dep:deps){
            for(Item item:dep.getItems()){
                if(itemToCheck.equals(item) == true)
                    return true;
            }
        }
        return false;
    }
    
    //Adaugarea unui produs in magazin
    private void add_item_buttonAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_item_buttonAdminActionPerformed
        //Se creeaza un JOptionPane cu 4 campuri pentru introducerea unui nou produs
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
        
        JTextField field_id = new JTextField("ID",5);
        JTextField field_idDep = new JTextField("ID_department",5);
        JTextField field_name = new JTextField("Name", 30);
        JTextField field_price = new JTextField("Price", 10);
        clearTextJTextField(field_id);
        clearTextJTextField(field_idDep);
        clearTextJTextField(field_name);
        clearTextJTextField(field_price);
        panel.add(field_id);
        panel.add(field_idDep);
        panel.add(field_name);
        panel.add(field_price);
        String event_add_Product = null;
        int value = JOptionPane.showConfirmDialog(null, panel, "Add Item", JOptionPane.OK_CANCEL_OPTION);
        if (value == JOptionPane.OK_OPTION) {
            //Eroare in cazul in care exista campuri goale
            if(field_idDep.getText().equals("") == true || field_idDep.getText().equals("ID_department") == true ||
                    field_id.getText().equals("") == true || field_id.getText().equals("ID") == true ||
                    field_name.getText().equals("") == true || field_name.getText().equals("Name") == true ||
                    field_price.getText().equals("") == true || field_price.getText().equals("Price") == true ){
                Object[] options = { "OK" };
                JOptionPane.showOptionDialog(null, "Invalid item!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                return;
            }
            //Crearea event-ului
            event_add_Product =  "addProduct;" + 
                    field_idDep.getText() + ";" +
                    field_id.getText() + ";" +
                    field_price.getText() + ";" +
                    field_name.getText();
            Item toAdd;
            toAdd = new Item(field_name.getText(),
                Integer.parseInt(field_id.getText()),
                Integer.parseInt(field_idDep.getText()),
                Float.parseFloat(field_price.getText()));
            if(checkIfItemExists(toAdd) == true){
                Object[] options = { "OK" };
                JOptionPane.showOptionDialog(null, "Item already exists in shop!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                return;
            }
            obj.findEvent(event_add_Product);
            //Actualizarea tabelului din panou
            table_itemsAdmin_init(table_itemsAdmin);
        }
    }//GEN-LAST:event_add_item_buttonAdminActionPerformed

    //Stergerea unui produs din magazin
    private void delete_item_buttonAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_item_buttonAdminActionPerformed
        //Preluarea produsului selectat din tabel
        int row = 0, tmp_row = 0;
        int column = 0;
        DefaultTableModel model = (DefaultTableModel) table_itemsAdmin.getModel();
        tmp_row = table_itemsAdmin.getSelectedRow();
        //Verificare daca a fost selectat un produs
        if(tmp_row == -1){
            Object[] options = { "OK" };
            JOptionPane.showOptionDialog(null, "No item selected!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
            return;
        }
        row = table_itemsAdmin.convertRowIndexToModel(tmp_row);
        
        //Crearea si apelarea event-ului
        String event_del_Product = "delProduct;" + table_itemsAdmin.getModel().getValueAt(row, column).toString();
        obj.findEvent(event_del_Product);
        model.removeRow(row);
    }//GEN-LAST:event_delete_item_buttonAdminActionPerformed

    //Modificarea pretului unui produs
    private void modify_item_buttonAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modify_item_buttonAdminActionPerformed
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
        //Preluarea produsului selectat din tabel
        int tmp_row = table_itemsAdmin.getSelectedRow();
        if(tmp_row == -1){
            Object[] options = { "OK" };
            JOptionPane.showOptionDialog(null, "No item selected!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
            return;
        }
        
        //Crearea unui JOptionPane unde cu un textfield pentru adaugarea unui nou pret
        JTextField field_price = new JTextField("New Price", 10);
        clearTextJTextField(field_price);
        panel.add(field_price);
        String event_modify_Product = null;
        int value = JOptionPane.showConfirmDialog(null, panel, "Add Item", JOptionPane.OK_CANCEL_OPTION);
        if (value == JOptionPane.OK_OPTION) {
            //modifyProduct;DepID;ItemID;Price
            if(field_price.getText().equals("") == true || field_price.getText().equals("New Price") == true){
                Object[] options = { "OK" };
                JOptionPane.showOptionDialog(null, "Invalid price!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                return;
            }
            int row = 0;
            int column = 0;
            DefaultTableModel model = (DefaultTableModel) table_itemsAdmin.getModel();
            row = table_itemsAdmin.convertRowIndexToModel(table_itemsAdmin.getSelectedRow());
            //crearea event-ului
            event_modify_Product = "modifyProduct;" + 
                    table_itemsAdmin.getModel().getValueAt(row, 1).toString() + ";" +
                    table_itemsAdmin.getModel().getValueAt(row, 0).toString() + ";" +
                    field_price.getText();
            obj.findEvent(event_modify_Product);
        }
        else
            return;
        
        obj.findEvent(event_modify_Product);
        //Actualizarea tabelului
        table_itemsAdmin_init(table_itemsAdmin);
    }//GEN-LAST:event_modify_item_buttonAdminActionPerformed

    //Crearea panoului de clienti
    private void createCustomersPanel(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createCustomersPanel
        hide_allPanels();
        customers_panel.setVisible(true);
        DefaultTableModel model = (DefaultTableModel) table_Customers.getModel();
        model.setRowCount(0);
        Vector<Customer> customers = Store.getInstance().getCustomers();
        for(Customer cust:customers){
            model.addRow(new Object[]{cust.name});
        }
    }//GEN-LAST:event_createCustomersPanel

    //Selectia clientului
    private void select_customer_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_customer_buttonActionPerformed
        //Preluarea clientului selectat din tabel
        int tmp_row = 0, row = 0;
        DefaultTableModel model = (DefaultTableModel) table_Customers.getModel();
        tmp_row = table_Customers.getSelectedRow();
        //Verificare daca a fost selectat
        if(tmp_row == -1){
            Object[] options = { "OK" };
            JOptionPane.showOptionDialog(null, "No customer selected!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
            return;
        }
        row = table_Customers.convertRowIndexToModel(tmp_row);
        String customer_name = table_Customers.getModel().getValueAt(row, 0).toString();
        System.out.println(customer_name);
        //Cautarea lui in magazin
        for(Customer c: Store.getInstance().getCustomers())
            if(c.name == customer_name){
                customer = c;
                customerName_label.setText(customer.name);
            }
                
    }//GEN-LAST:event_select_customer_buttonActionPerformed

    //Afisarea tabelului cu clienti
    private void table_itemsCustomer_init(JTable table_itemsCustomer) {
        DefaultTableModel model = (DefaultTableModel) table_itemsCustomer.getModel();
        model.setRowCount(0);
        Iterator<Item> it = customer.cart.listIterator();
        while(it.hasNext()) {
            Item item = it.next();
            model.addRow(new Object[]{
                    item.getID(),
                    item.getID_department(),
                    item.getName(),
                    item.getPrice()}
                );
        }
    }
    
    //Crearea panoului shopping cart
    private void createShoppingCartPanel(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createShoppingCartPanel
        //Eroare daca nu a fost selectat un client
        if(customer == null){
            Object[] options = { "OK" };
            JOptionPane.showOptionDialog(null, "No customer found!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
            return;
        }
        
        hide_allPanels();
        add_item_buttonCustomer.setVisible(true);
        delete_item_buttonCustomer.setVisible(true);
        placeOrder_button.setVisible(true);
        shoppingCart_panel.setVisible(true);
        budget_label.setText("Budget:   " + customer.cart.getBudget());
        table_itemsCustomer_init(table_itemsCustomer);
    }//GEN-LAST:event_createShoppingCartPanel

    //Stergerea unui item din cosul de cumparatori, analog cu stergerea din lista de produse 
    //a magazinului
    private void delete_item_buttonCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_item_buttonCustomerActionPerformed
        int row = 0, tmp_row = 0;

        int column = 0;
        DefaultTableModel model = (DefaultTableModel) table_itemsCustomer.getModel();
        tmp_row = table_itemsCustomer.getSelectedRow();
        if(tmp_row == -1){
            Object[] options = { "OK" };
            JOptionPane.showOptionDialog(null, "No item selected!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
            return;
        }
        row = table_itemsCustomer.convertRowIndexToModel(tmp_row);
        
        //Crearea eventului
        String event_del_Item = "delItem;" + 
                table_itemsCustomer.getModel().getValueAt(row, 0).toString() + ";" +
                "ShoppingCart;" +
                customer.name;
        obj.findEvent(event_del_Item);
        model.removeRow(row);
        //Actualizarea pretului total al produselor si al bugetului
        totalPrice_label.setText("Total:    " + String.format("%.2f", customer.cart.getTotalPrice()));
        budget_label.setText("Budget:   " + customer.cart.getBudget());
    }//GEN-LAST:event_delete_item_buttonCustomerActionPerformed

    //Adaugarea produsului in cosul de cumparaturi
    private void add_item_buttonCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_item_buttonCustomerActionPerformed
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
        
        JTextField field_id = new JTextField("ID",5);
        clearTextJTextField(field_id);
        panel.add(field_id);
        String event_add_Item = null;
        int value = JOptionPane.showConfirmDialog(null, panel, "Add Item", JOptionPane.OK_CANCEL_OPTION);
        if (value == JOptionPane.OK_OPTION) {
            if(field_id.getText().equals("") == true || field_id.getText().equals("ID") == true){
                Object[] options = { "OK" };
                JOptionPane.showOptionDialog(null, "Invalid item!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                return;
            }
            //Crearea eventului
            event_add_Item =  "addItem;" + 
                    field_id.getText() + ";" +
                    "ShoppingCart;" +
                    customer.name;
            System.out.println(event_add_Item);
            obj.findEvent(event_add_Item);
            //Actualizarea datelor
            table_itemsCustomer_init(table_itemsCustomer);
            totalPrice_label.setText("Total:    " + String.format("%.2f", customer.cart.getTotalPrice()));
            budget_label.setText("Budget:   " + customer.cart.getBudget());
        }
    }//GEN-LAST:event_add_item_buttonCustomerActionPerformed
    
    //Plasarea unei comenzi, se creeaza un nou shopping cart cu bugetul ramas
    private void placeOrder_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeOrder_buttonActionPerformed
        float budget = customer.cart.getBudget();
        Iterator<Item> it = customer.cart.listIterator();
        while(it.hasNext()) {
            Item item = it.next();
            customer.cart.remove(item);
        }
        customer.cart.setBudget(budget);
        table_itemsCustomer_init(table_itemsCustomer);
        totalPrice_label.setText("Total:    " + String.format("%.2f", customer.cart.getTotalPrice()));
    }//GEN-LAST:event_placeOrder_buttonActionPerformed
    
    //Afisarea tabelului cu produsele din wishlist
    private void table_itemsWishList_init(JTable table_WishList) {
        DefaultTableModel model = (DefaultTableModel) table_WishList.getModel();
        model.setRowCount(0);
        Iterator<Item> it = customer.wishList.listIterator();
        while(it.hasNext()) {
            Item item = it.next();
            model.addRow(new Object[]{
                    item.getID(),
                    item.getID_department(),
                    item.getName(),
                    item.getPrice()}
                );
        }
    }
    
    //Crearea panoului cu itemele din wishlist
    private void createWishListPanel(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_createWishListPanel
        if(customer == null){
            Object[] options = { "OK" };
            JOptionPane.showOptionDialog(null, "No customer found!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
            return;
        }
        
        hide_allPanels();
        add_item_wishListButton.setVisible(true);
        delete_item_wishListButton.setVisible(true);
        wishList_panel.setVisible(true);
        table_itemsWishList_init(table_WishList);
    }//GEN-LAST:event_createWishListPanel

    //Adaugarea itemelui in wishlist, analog cos de cumparaturi
    private void add_item_wishListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_item_wishListButtonActionPerformed
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
        
        JTextField field_id = new JTextField("ID",5);
        clearTextJTextField(field_id);
        panel.add(field_id);
        String event_add_Item = null;
        int value = JOptionPane.showConfirmDialog(null, panel, "Add Item", JOptionPane.OK_CANCEL_OPTION);
        if (value == JOptionPane.OK_OPTION) {
            if(field_id.getText().equals("") == true || field_id.getText().equals("ID") == true){
                Object[] options = { "OK" };
                JOptionPane.showOptionDialog(null, "Invalid item!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
                return;
            }
            event_add_Item =  "addItem;" + 
                    field_id.getText() + ";" +
                    "WishList;" +
                    customer.name;
            System.out.println(event_add_Item);
            obj.findEvent(event_add_Item);
            table_itemsWishList_init(table_WishList);
        }
    }//GEN-LAST:event_add_item_wishListButtonActionPerformed

    //Stergerea unui produs din wishlist, analog cos de cumparaturi
    private void delete_item_wishListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_item_wishListButtonActionPerformed
         int row = 0, tmp_row = 0;

        int column = 0;
        DefaultTableModel model = (DefaultTableModel) table_WishList.getModel();
        tmp_row = table_WishList.getSelectedRow();
        if(tmp_row == -1){
            Object[] options = { "OK" };
            JOptionPane.showOptionDialog(null, "No item selected!", "Error", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE, null, options, options[0]);
            return;
        }
        row = table_WishList.convertRowIndexToModel(tmp_row);
       
        String event_del_Item = "delItem;" + 
                table_WishList.getModel().getValueAt(row, 0).toString() + ";" +
                "WishList;" +
                customer.name;
        obj.findEvent(event_del_Item);
        model.removeRow(row);
    }//GEN-LAST:event_delete_item_wishListButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        obj = new Test();
        Store store = Store.getInstance(); 
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
          
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ShoppingCart_label;
    private javax.swing.JLabel WishList_label;
    private javax.swing.JButton add_item_buttonAdmin;
    private javax.swing.JButton add_item_buttonCustomer;
    private javax.swing.JButton add_item_wishListButton;
    private javax.swing.JPanel admin_panel;
    private javax.swing.JLabel admininstrator_label;
    private javax.swing.JPanel background;
    private javax.swing.JLabel budget_label;
    private javax.swing.JLabel customerName_label;
    private javax.swing.JLabel customers_label;
    private javax.swing.JPanel customers_panel;
    private javax.swing.JButton delete_item_buttonAdmin;
    private javax.swing.JButton delete_item_buttonCustomer;
    private javax.swing.JButton delete_item_wishListButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton load_customer_button;
    private javax.swing.JTextField load_customer_textfield;
    private javax.swing.JButton load_files_button;
    private javax.swing.JPanel load_files_panel;
    private javax.swing.JButton load_store_button;
    private javax.swing.JTextField load_store_textfield;
    private javax.swing.JButton modify_item_buttonAdmin;
    private javax.swing.JButton placeOrder_button;
    private javax.swing.JButton select_customer_button;
    private javax.swing.JPanel shoppingCart_panel;
    private javax.swing.JPanel side_panel;
    private javax.swing.JTable table_Customers;
    private javax.swing.JTable table_WishList;
    private javax.swing.JTable table_itemsAdmin;
    private javax.swing.JTable table_itemsCustomer;
    private javax.swing.JPanel topbar_panel;
    private javax.swing.JLabel totalPrice_label;
    private javax.swing.JPanel wishList_panel;
    // End of variables declaration//GEN-END:variables
}
